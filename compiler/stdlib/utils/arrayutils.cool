
import std.collection.Array;

class ArrayUtils() {
    def qsort(array: Array): Unit = {
        recursive_qsort(array, 0, array.length - 1);
    };

    private def recursive_qsort(array: Array, start_index: Int, end_index: Int): Unit = {
        if (start_index < end_index) {
            var pivot_index: Int = partition(array, start_index, end_index);
            recursive_qsort(array, start_index, pivot_index - 1);
            recursive_qsort(array, pivot_index + 1, end_index);
        };
    };

    private def partition(array: Array, start_index: Int, end_index: Int): Int = {
        var pivot_index: Int = start_index;
        var pivot_value: Any = array.get(pivot_index);
        var i: Int = pivot_index + 1;
        while (i <= end_index) {
            if (array.get(i) <= pivot_value) {
                pivot_index = pivot_index + 1;
                swap_elements(array, i, pivot_index);
            };
            i = i + 1;
        };
        swap_elements(array, pivot_index, start_index);
        pivot_index
    };

    private def swap_elements(array: Array, i: Int, j: Int): Unit = {
        var tmp: Any = array.get(i);
        array.put(i, array.get(j));
        array.put(j, tmp);
    };
}
